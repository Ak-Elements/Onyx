#version 460 core

#include "includes/common.h"
#include "includes/scattering/scattering.h"

vertex
{
    void main()
    {
        vec2 texCoord = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(texCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;
    }
}

fragment
{
    const float sunTransmittanceSteps = 40.0;

    layout(location = 0) out vec4 outColor;

    vec3 GetSunTransmittance(vec3 pos, vec3 sunDir) 
    {
        if (RayIntersectSphere(pos, sunDir, groundRadiusMM) > 0.0)
        {
            return vec3(0.0);
        }

        float atmoDist = RayIntersectSphere(pos, sunDir, atmosphereRadiusMM);
        float t = 0.0;
        
        vec3 transmittance = vec3(1.0);
        for (float i = 0.0; i < sunTransmittanceSteps; i += 1.0)
        {
            float newT = ((i + 0.3)/sunTransmittanceSteps)*atmoDist;
            float dt = newT - t;
            t = newT;
            
            vec3 newPos = pos + t*sunDir;
            
            vec3 rayleighScattering, extinction;
            float mieScattering;
            GetScatteringValues(newPos, rayleighScattering, mieScattering, extinction);
            
            transmittance *= exp(-dt*extinction);
        }

        return transmittance;
    }

    void main()
    {
        if (gl_FragCoord.x >= (TRANSMITTANCE_TEXTURE_WIDTH + 1.5) || gl_FragCoord.y >= (TRANSMITTANCE_TEXTURE_HEIGHT + 1.5)) {
            return;
        }

        float u = clamp(gl_FragCoord.x, 0.0, TRANSMITTANCE_TEXTURE_WIDTH-1.0)/TRANSMITTANCE_TEXTURE_WIDTH;
        float v = clamp(gl_FragCoord.y, 0.0, TRANSMITTANCE_TEXTURE_HEIGHT-1.0)/TRANSMITTANCE_TEXTURE_HEIGHT;
        
        float sunCosTheta = 2.0 * u - 1.0;
        float sunTheta = safeacos(sunCosTheta);
        float height = mix(groundRadiusMM, atmosphereRadiusMM, v);
        
        vec3 pos = vec3(0.0, height, 0.0); 
        vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));
        
        outColor = vec4(GetSunTransmittance(pos, sunDir), 1.0);
    }
}