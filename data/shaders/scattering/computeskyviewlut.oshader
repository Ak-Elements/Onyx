#version 460 core

#include "includes/common.h"
#include "includes/scattering/scattering.h"

vertex
{
    void main()
    {
        vec2 texCoord = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(texCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;
    }
}

fragment
{
    const int SCATTERING_SAMPLES = 32;

    layout( push_constant ) uniform constants
    {
        vec3 CameraPosition;
        uint TransmittanceTextureIndex;

        vec3 SunDirection;
        uint MultipleScatteringTextureIndex;
    } PushConstants;

    layout (location = 0) out vec4 outColor;

    vec3 RaymarchScattering(vec3 position, vec3 rayDirection, vec3 sunDirection, float tMax)
    {
        float cosTheta = dot(rayDirection, sunDirection);
        
        float miePhaseValue = MiePhaseFunction(cosTheta);
        float rayleighPhaseValue = RayleighPhaseFunction(-cosTheta);
        
        vec3 luminance = vec3(0.0);
        vec3 transmittance = vec3(1.0);
        float t = 0.0;

        for (int i = 0; i < SCATTERING_SAMPLES; ++i)
        {
            float newT = ((float(i) + 0.3) / SCATTERING_SAMPLES) * tMax;
            float d_t = newT - t;
            t = newT;

            vec3 pos_i = position + t * rayDirection;
           
            vec3 rayleighScattering;
            vec3 extinction;
            float mieScattering;
            GetScatteringValues(pos_i, rayleighScattering, mieScattering, extinction);

            vec3 sampleTransmittance = exp(-d_t * extinction);

            vec3 sunTransmittance = GetTransmittance(BindlessTextures[nonuniformEXT(PushConstants.TransmittanceTextureIndex)], pos_i, sunDirection);
            vec3 psiMultipleScattering = GetMultipleScattering(BindlessTextures[nonuniformEXT(PushConstants.MultipleScatteringTextureIndex)], pos_i, sunDirection);

            vec3 rayleighInScattering = rayleighScattering * ((rayleighPhaseValue * sunTransmittance) + psiMultipleScattering);
            vec3 mieInScattering = mieScattering * ((miePhaseValue * sunTransmittance) + psiMultipleScattering);
            vec3 inScattering = (rayleighInScattering + mieInScattering);

            vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;

            luminance += scatteringIntegral * transmittance;
            transmittance *= sampleTransmittance; 
        }

        return luminance;
    }

    void main()
    {
        if (gl_FragCoord.x >= (SKY_VIEW_TEXTURE_WIDTH + 1.5) || gl_FragCoord.y >= (SKY_VIEW_TEXTURE_HEIGHT + 1.5)) {
            return;
        }

        float u = clamp(gl_FragCoord.x, 0.0, SKY_VIEW_TEXTURE_WIDTH - 1.0) / SKY_VIEW_TEXTURE_WIDTH;
        float v = clamp(gl_FragCoord.y, 0.0, SKY_VIEW_TEXTURE_HEIGHT - 1.0) / SKY_VIEW_TEXTURE_HEIGHT;
        
        float azimuthAngle = (u - 0.5) * 2.0 * PI;

        float adjVertical;
        if (v < 0.5)
        {
            float coord = 1.0 - 2.0 * v;
            adjVertical = -coord * coord;
        }
        else
        {
            float coord = v * 2.0 - 1.0;
            adjVertical = coord * coord;
        }

        const vec3 viewPos = (PushConstants.CameraPosition / 1000000.0) + vec3(0.0, groundRadiusMM, 0.0);
        //const vec3 viewPos = vec3(0.0, groundRadiusMM + 0.0002, 0.0);

        float height = length(viewPos);
        vec3 up = viewPos / height;
        float horizonAngle = safeacos(sqrt((height * height) - (groundRadiusMM * groundRadiusMM)) / height) - 0.5 * PI;
        float altitudeAngle = adjVertical * 0.5 * PI - horizonAngle;

        float cosAltitude = cos(altitudeAngle);
        vec3 rayDirection = vec3(cosAltitude * sin(azimuthAngle), sin(altitudeAngle), -cosAltitude * cos(azimuthAngle));

        float sunAltitude = (0.5 * PI) - acos(dot(PushConstants.SunDirection, up));
        vec3 sunDirection = vec3(0.0, sin(sunAltitude), -cos(sunAltitude));

        float atmosphereDistance = RayIntersectSphere(viewPos, rayDirection, atmosphereRadiusMM);
        float groundDistance = RayIntersectSphere(viewPos, rayDirection, groundRadiusMM);
        
        float tMax = (groundDistance < 0.0) ? atmosphereDistance : groundDistance;
        vec3 luminance = RaymarchScattering(viewPos, rayDirection, sunDirection, tMax);
        outColor = vec4(luminance, 1.0);
    }
}