#version 460 core

#include "includes/common.h"
#include "includes/scattering/scattering.h"

vertex
{
    void main()
    {
        vec2 texCoord = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(texCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;
    }
}

fragment
{
    const float multipleScatteringSteps = 20.0;
    const int sqrtSamples = 8;

    layout( push_constant ) uniform constants
    {
        uint TransmittanceTextureIndex;
    } PushConstants;

    layout(location = 0) out vec4 outColor;

    vec3 GetSphericalDirection(float theta, float phi)
    {
        float cosPhi = cos(phi);
        float sinPhi = sin(phi);
        float cosTheta = cos(theta);
        float sinTheta = sin(theta);
        return vec3(sinPhi * sinTheta, cosPhi, sinPhi * cosTheta);
    }

    void GetMultipleScatteringValues(vec3 position, vec3 sunDirection, out vec3 luminanceOut, out vec3 fmsOut)
    {
        luminanceOut = vec3(0.0);
        fmsOut = vec3(0.0);

        float invSamples = 1.0 / (sqrtSamples * sqrtSamples);
        for (int i = 0; i < sqrtSamples; ++i)
        {
            float theta = PI * (float(i) + 0.5) / sqrtSamples;
            for (int j = 0; j < sqrtSamples; ++j)
            {
                float phi = safeacos(1.0 - 2.0 * (float(j) + 0.5) / sqrtSamples);
                vec3 rayDirection = GetSphericalDirection(theta, phi);

                float atomosphereDistance = RayIntersectSphere(position, rayDirection, atmosphereRadiusMM);
                float groundDistance = RayIntersectSphere(position, rayDirection    , groundRadiusMM);

                float tMax = atomosphereDistance;
                if (groundDistance > 0.0)
                {
                    tMax = groundDistance;
                }

                float cosTheta = dot(rayDirection, sunDirection);
                
                float miePhaseValue = MiePhaseFunction(cosTheta);
                float rayleighPhaseValue = RayleighPhaseFunction(-cosTheta);

                vec3 luminance = vec3(0.0);
                vec3 luminanceFactor = vec3(0.0);
                vec3 transmittance = vec3(1.0);

                float t = 0.0;

                for (float step_i = 0.0; step_i < multipleScatteringSteps; ++step_i)
                {
                    float new_t = ((step_i + 0.3) / multipleScatteringSteps) * tMax;
                    float d_t = new_t - t;
                    t = new_t;

                    vec3 pos_i = position + t * rayDirection;

                    vec3 rayleighScattering;
                    vec3 extinction;
                    float mieScattering;
                    GetScatteringValues(pos_i, rayleighScattering, mieScattering, extinction);

                    vec3 sampleTransmittance = exp(d_t * extinction);

                    // Integrate within each segement
                    vec3 scatteringNoPhase = rayleighScattering + mieScattering;
                    vec3 scatteringFactor = (scatteringNoPhase - scatteringNoPhase * sampleTransmittance) / extinction;
                    luminanceFactor += transmittance * scatteringFactor;

                    vec3 sunTransmittance = GetTransmittance(BindlessTextures[nonuniformEXT(PushConstants.TransmittanceTextureIndex)], pos_i, sunDirection);
                    
                    vec3 rayleighInScattering = rayleighScattering * rayleighPhaseValue;
                    float mieInScattering = mieScattering * miePhaseValue;
                    vec3 inScattering = (rayleighInScattering + mieInScattering) * sunTransmittance;

                    vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;

                    luminance += scatteringIntegral * transmittance;
                    transmittance *= sampleTransmittance; 
                }

                if (groundDistance > 0.0)
                {
                    vec3 hitPosition = position + groundDistance * rayDirection;
                    if (dot(position, sunDirection) > 0.0)
                    {
                        hitPosition = normalize(hitPosition) * groundRadiusMM;
                        luminance += transmittance * groundAlbedo * GetTransmittance(BindlessTextures[nonuniformEXT(PushConstants.TransmittanceTextureIndex)], hitPosition, sunDirection);
                    }
                }

                fmsOut += luminanceFactor * invSamples;
                luminanceOut += luminance * invSamples;
            }
        }
    }

    void main()
    {
        if (gl_FragCoord.x >= (MULTIPLE_SCATTERING_TEXTURE_WIDTH + 1.5) || gl_FragCoord.y >= (MULTIPLE_SCATTERING_TEXTURE_HEIGHT + 1.5)) {
            return;
        }

        float u = clamp(gl_FragCoord.x, 0.0, MULTIPLE_SCATTERING_TEXTURE_WIDTH - 1.0) / MULTIPLE_SCATTERING_TEXTURE_WIDTH;
        float v = clamp(gl_FragCoord.y, 0.0, MULTIPLE_SCATTERING_TEXTURE_HEIGHT - 1.0)/ MULTIPLE_SCATTERING_TEXTURE_HEIGHT;
        
        float sunCosTheta = 2.0*u - 1.0;
        float sunTheta = safeacos(sunCosTheta);
        float height = mix(groundRadiusMM, atmosphereRadiusMM, v);
        
        vec3 pos = vec3(0.0, height, 0.0); 
        vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));
        
        vec3 luminance, f_ms;
        GetMultipleScatteringValues(pos, sunDir, luminance, f_ms);

        vec3 psi = luminance / (1.0 - f_ms);
        outColor = vec4(psi, 1.0);
    }
}