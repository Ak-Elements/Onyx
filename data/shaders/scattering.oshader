#version 460 core

#include "includes/common.h"
#include "includes/viewconstants.h"

vertex
{
    layout (location = 0) out vec2 vTexCoord;

    void main()
    {
        vTexCoord.xy = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(vTexCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;
    }
}

fragment
{
    layout( push_constant ) uniform Constants
    {
        float TimeOfDay;

    } u_Constants;

#define PI 3.1415926536

    // scattering coefficients at sea level (m)
    const vec3 betaR = vec3(5.5e-6, 13.0e-6, 22.4e-6); // Rayleigh 
    const vec3 betaM = vec3(21e-6); // Mie

    // scale height (m)
    // thickness of the atmosphere if its density were uniform
    const float RayleighThickness = 7994.0; // Rayleigh
    const float MieThickness = 1200.0; // Mie

    const vec3 EarthCenter = vec3(0);
    const float EarthRadius = 6360e3;
    const float AtmosphereRadius = 6420e3;

    const vec3 SunIntensity = vec3(20);
    const vec3 MoonIntensity = SunIntensity * vec3(0.2, 0.2, 0.35); 

    const int NumSamples = 14;
    const int NumSamplesLight = 3;

    float rayleigh_phase_func(float mu)
    {
        return 3.*(1.+mu*mu)/(16.*PI);
    }

    //A beloved classic
    const float g = 0.76;
    float henyey_greenstein_phase_func(float mu)
    {
        return
                            (1. - g*g)
        / //---------------------------------------------
            ((4. * PI) * pow(1. + g*g - 2.*g*mu, 1.5));
    }

    //This function came from https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky
    //It seems to be an extension of the HG phase function though
    //I don't actually use it anywhere
    float mie_phase_func(float mu)
    {
        return 3.*(1.-g*g)*(1.+mu*mu)/(8.*PI)/(2.+g*g)/pow(1.+g*g-2.*g*mu,1.5);
    }
    
    bool IntersectsSphere(vec3 rayOrigin, vec3 rayDirection, vec3 center, float radius, out float t0, out float t1)
    {
        vec3 rayToCenter = center - rayOrigin;
        float squaredRadius = radius * radius;
        float tca = dot(rayToCenter, rayDirection);
        float d2 = dot(rayToCenter, rayToCenter) - (tca * tca);
        if (d2 > squaredRadius) return false;
        float thc = sqrt(squaredRadius - d2);
        t0 = tca - thc;
        t1 = tca + thc;
        return true;
    }

    bool GetRayleighMieScattering(vec3 rayOrigin, vec3 rayDirection, out float rayleighFactor, out float mieFactor)
    {
        float t0, t1;
        IntersectsSphere(rayOrigin, rayDirection, EarthCenter, AtmosphereRadius, t0, t1);

        float marchPosition = 0.0;
        float marchLength = t1 / float(NumSamplesLight);

        rayleighFactor = 0.0;
        mieFactor = 0.0;

        for (int i = 0; i < NumSamplesLight; ++i)
        {
            vec3 start = rayOrigin + rayDirection * (marchPosition + 0.5 * marchLength);
            float height = length(start) - EarthRadius;
            rayleighFactor += exp(-height / RayleighThickness) * marchLength;
            mieFactor += exp (-height / MieThickness) * marchLength;

            marchPosition += marchLength;
        }

        return true;
    }

    vec3 GetIncidentLight(vec3 rayOrigin, vec3 rayDirection)
    {
        vec3 sunDirection = normalize(vec3(0, sin(u_Constants.TimeOfDay), cos(u_Constants.TimeOfDay)));
        vec3 moonDirection = -sunDirection;

        float t0, t1;
        if (IntersectsSphere(rayOrigin, rayDirection, EarthCenter, AtmosphereRadius, t0, t1) == false)
            return vec3(0);

        float marchLength = t1 / float(NumSamples);
        float mu = dot(sunDirection, rayDirection);
        float muMoon = dot(moonDirection, rayDirection);

        float rayleighPhase = rayleigh_phase_func(mu);
        float miePhase = henyey_greenstein_phase_func(mu);

        float opticalDepthRayleigh = 0.0;
        float opticalDepthMie = 0.0;

        vec3 rayleighSum = vec3(0);
        vec3 mieSum = vec3(0);
        
        float marchingPosition = 0;

        for (int i = 0; i < NumSamples; ++i)
        {
            vec3 start = rayOrigin + rayDirection * (marchingPosition + 0.5 * marchLength);
            float height = length(start) - EarthRadius;

            // sample densities
            float hr = exp(-height / RayleighThickness) * marchLength;
            float hm = exp(-height / MieThickness) * marchLength;

            opticalDepthRayleigh += hr;
            opticalDepthMie += hm;

            float opticalDepthSunRayleigh = 0.;
            float opticalDepthSunMie = 0.;

            bool isAboveHorizon = GetRayleighMieScattering(start, sunDirection, opticalDepthSunRayleigh, opticalDepthSunMie);

            if (isAboveHorizon)
            {
                vec3 tau = betaR * (opticalDepthRayleigh + opticalDepthSunRayleigh)
                    + betaM * 1.1 * (opticalDepthMie + opticalDepthSunMie);

                vec3 attenuation = exp(-tau);
                rayleighSum += hr * attenuation;
                mieSum += hm * attenuation;
            }

            marchingPosition += marchLength;
        }
        
        vec3 color = SunIntensity * (rayleighSum * rayleighPhase * betaR + mieSum * miePhase * betaM);

        if (dot(rayDirection, sunDirection) > 0.9995) color *= (1.5, 1.5, 1.5);
        return color;
    }

    layout (location = 0) in vec2 vTexCoord;
    layout (location = 0) out vec4 outColor;

    void main()
    {
        vec3 camPos = u_ViewConstants.CameraPosition;
        camPos.y = EarthRadius + 1.0;

        vec3 color = GetIncidentLight(u_ViewConstants.CameraPosition, normalize(vec3(vTexCoord.xy + vec2(0., .5), 2.0f)));
        color = pow(color*5.0 / (color*5.0+vec3(1)),vec3(2.2)); // gamma correct
        outColor = vec4(color, 1.0);
    }
}