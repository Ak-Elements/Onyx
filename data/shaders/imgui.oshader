#version 460 core

#include "includes/common.h"

vertex
{
	layout (location = 0) in vec2 inPos;
	layout (location = 1) in vec2 inUV;
	layout (location = 2) in vec4<RGBA_UNORM8> inColor;
	
	layout(push_constant) uniform uPushConstant { vec2 uScale; vec2 uTranslate; } pc;

	layout (location = 0) out OutStruct
	{
		vec2 outUV;
		vec4 outColor;
#if BINDLESS
		flat uint textureId;
#endif
	};

	void main() 
	{
		outUV = inUV;
		outColor = inColor;
		textureId = gl_InstanceIndex;
		gl_Position = vec4( inPos.xy * pc.uScale + pc.uTranslate, 0,1 );
	}
}

fragment
{
	layout (location = 0) in InStruct
	{
		vec2 inUV;
		vec4 inColor;
#if BINDLESS
		flat uint textureId;
#endif
	};
	
#if !BINDLESS
	layout (set = MATERIAL_SET, binding = 1) uniform sampler2D fontSampler;
#endif

	layout (location = 0) out vec4 outColor;

	void main() 
	{
#if BINDLESS
		vec4 sampledTex = texture(BindlessTextures[nonuniformEXT(textureId)], inUV);
#else
		vec4 sampledTex = texture(fontSampler, inUV);
#endif
		outColor = inColor * sampledTex;
	}
}