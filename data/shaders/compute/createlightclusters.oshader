#version 460 core 

compute
{

layout(local_size_x = 1, local_size_y = 1) in;

layout(push_constant) uniform Constants
{
    mat4 InverseProjectionMatrix;

    vec2 Viewport;
    float zNear;
    float zFar;

    uint ClusterSize;
    uint Padding[3];
} u_Constants;

// SSBO
struct VolumeTileAABB
{
    vec4 Min;
    vec4 Max;
};

layout (std430, set = 1, binding = 0) buffer ClusterAABBs
{
    VolumeTileAABB Clusters[];
};

vec4 ClipToView(vec4 clipPos)
{
    // View space Transform
    vec4 viewPos = u_Constants.InverseProjectionMatrix * clipPos;
    // Perspective Projection
    viewPos = viewPos / viewPos.w;
    return viewPos;
}

vec4 ScreenToView(vec4 screenPos)
{
    // Convert to NDC
    vec2 texCoord = screenPos.xy / u_Constants.Viewport.xy;

    // Convert to Clip
    vec4 clipPos = vec4(vec2(texCoord.x, texCoord.y) * 2.0 - 1.0f, screenPos.z, screenPos.w);
    return ClipToView(clipPos);
}

//Creates a line from the eye/camera to the screenpoint, then finds its intersection
//With a z oriented plane located at the given distance to the origin
vec3 LineIntersectionToZPlane(vec3 A, vec3 B, float zDistance)
{
    // z plane normal
    vec3 normal = vec3(0.0, 0.0, 1.0);

    vec3 ab = B - A;

    // Get interesection to plane
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);

    vec3 result = A + t * ab;
    return result;
}

void main()
{
    // Camera position in view space
    const vec3 camPosition = vec3(0.0);

    // Per Tile
    uint tileSizePx = u_Constants.ClusterSize; // how many pixels does a tile have (e.g.: 16 x 16)
    uint tileIndex = gl_WorkGroupID.x +
                     gl_WorkGroupID.y * gl_NumWorkGroups.x +
                     gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

    // Calculate Min/Max in screen space
    vec4 minPointScreenSpace = vec4(gl_WorkGroupID.xy * tileSizePx, 1.0, 1.0); // Top Left
    vec4 maxPointScreenSpace = vec4(vec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * tileSizePx, 1.0, 1.0); // Bottom right

    // Convert Min/Max to view space
    vec3 minPointViewSpace = ScreenToView(minPointScreenSpace).xyz;
    vec3 maxPointViewSpace = ScreenToView(maxPointScreenSpace).xyz;
    
    // Near and far values of the cluster in view space
    float tileNear = -u_Constants.zNear * pow(u_Constants.zFar/u_Constants.zNear, gl_WorkGroupID.z / float(gl_NumWorkGroups.z));
    float tileFar = -u_Constants.zNear * pow(u_Constants.zFar/u_Constants.zNear, (gl_WorkGroupID.z + 1) / float(gl_NumWorkGroups.z));

    // Finding the 4 intersection points
    vec3 minPointNear = LineIntersectionToZPlane(camPosition, minPointViewSpace, tileNear);
    vec3 minPointFar = LineIntersectionToZPlane(camPosition, minPointViewSpace, tileFar);
    vec3 maxPointNear = LineIntersectionToZPlane(camPosition, maxPointViewSpace, tileNear);
    vec3 maxPointFar = LineIntersectionToZPlane(camPosition, maxPointViewSpace, tileFar);

    vec3 minPointAABB = min(min(minPointNear, minPointFar), min(maxPointNear, maxPointFar));
    vec3 maxPointAABB = max(max(minPointNear, minPointFar), max(maxPointNear, maxPointFar));

    Clusters[tileIndex].Min = vec4(minPointAABB, 0.0);
    Clusters[tileIndex].Max = vec4(maxPointAABB, 0.0);
}

}