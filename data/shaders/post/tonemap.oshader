#version 460 core

#include "includes/common.h"

vertex
{
    layout (location = 0) out vec2 vTexCoord;
    layout (location = 1) out flat uint textureId;

    void main()
    {
        vTexCoord.xy = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(vTexCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;

        textureId = gl_InstanceIndex;
    }
}

fragment
{
    layout (location = 0) in vec2 vTexCoord;
    layout (location = 1) in flat uint textureId;

    layout (location = 0) out vec4 outColor;

    layout(push_constant) uniform constants
    {
        uint TonemapFunction;
    } PushConstants;

    vec3 TonemapJodieReinhard(vec3 c)
    {
        // From: https://www.shadertoy.com/view/tdSXzD
        float l = dot(c, vec3(0.2126, 0.7152, 0.0722));
        vec3 tc = c / (c + 1.0);
        return mix(c / (l + 1.0), tc, tc);
    }

    vec3 TonemapAces(vec3 color)
    {
        mat3 matrix1 = mat3(
            0.59719, 0.07600, 0.02840,
            0.35458, 0.90834, 0.13383,
            0.04823, 0.01566, 0.83777
        );

	    mat3 matrix2 = mat3(
            1.60475, -0.10208, -0.00327,
            -0.53108, 1.10813, -0.07276,
            -0.07367, -0.00605, 1.07602
        );

        vec3 v = matrix1 * color;
        vec3 a = v * (v + 0.0245786) - 0.000090537;
        vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
	    return clamp(matrix2 * (a / b), 0.0, 1.0);
    }

    vec3 AgxDefaultConstractApproximation(vec3 color)
    {
        vec3 colorSquared = color * color;
        vec3 color4 = colorSquared * colorSquared;

          return + 15.5     * color4 * colorSquared
                - 40.14    * color4 * color
                + 31.96    * color4
                - 6.868    * colorSquared * color
                + 0.4298   * colorSquared
                + 0.1191   * color
                - 0.00232; 
    }

    vec3 TonemapAgx(vec3 color)
    {
        const mat3 agx_matrix = mat3(
            0.842479062253094, 0.0423282422610123, 0.0423756549057051,
            0.0784335999999992,  0.878468636469772,  0.0784336,
            0.0792237451477643, 0.0791661274605434, 0.879142973793104);

        const float min_ev = -12.47393;
        const float max_ev = 4.026069;

        // input color transform
        color = agx_matrix * color;

        // log2 space encoding
        color = clamp(log2(color), min_ev, max_ev);
        color = (color - min_ev) / (max_ev - min_ev);

        // sigmoid function approximation
        color = AgxDefaultConstractApproximation(color);
        return color;
    }

    vec3 AgxLook(vec3 color)
    {
        const vec3 lw = vec3(0.2126, 0.7152, 0.0722);
        float luma = dot(color, lw);

        // default
        vec3 offset = vec3(0.0);
        vec3 slope = vec3(1.0);
        vec3 power = vec3(1.0);
        float sat = 1.0;

        if (PushConstants.TonemapFunction == 4)
        {
            // golden
            slope = vec3(1.0, 0.9, 0.5);
            power = vec3(0.8);
            sat = 0.8;
        }
        else if (PushConstants.TonemapFunction == 5)
        {
            // punchy
            power = vec3(1.35, 1.35, 1.35);
            sat = 1.4;
        }

        color = pow(color * slope + offset, power);
        return luma + sat * (color - luma);
    }

    vec3 AgxEotf(vec3 color)
    {
        const mat3 agx_mat_inv = mat3(
            1.19687900512017, -0.0528968517574562, -0.0529716355144438,
            -0.0980208811401368, 1.15190312990417, -0.0980434501171241,
            -0.0990297440797205, -0.0989611768448433, 1.15107367264116);

        // Undo input transform
        color = agx_mat_inv * color;

        // sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display
        //color = pow(color, vec3(2.2));

        return color;
    }

    void main()
    {
        vec4 texture = texture(BindlessTextures[nonuniformEXT(textureId)], vTexCoord.xy);

        vec4 color = texture.xyzw;
        // color correct

        if (PushConstants.TonemapFunction == 1)
        {
            color.xyz = TonemapJodieReinhard(color.xyz);
            color.xyz = pow(color.xyz, vec3(1.0 / 2.2));
        }
        else if (PushConstants.TonemapFunction == 2)
        {
            color.xyz = TonemapAces(color.xyz);
            color.xyz = pow(color.xyz, vec3(1.0 / 2.2));
        }
        else if (PushConstants.TonemapFunction >= 3)
        {
            color.xyz = TonemapAgx(color.xyz);
            color.xyz = AgxLook(color.xyz);
            color.xyz = AgxEotf(color.xyz);
        }

        outColor = color;
    }
}