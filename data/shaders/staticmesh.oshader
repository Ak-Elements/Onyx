#version 460 core

#include "includes/common.h"
#include "includes/viewconstants.h"

vertex
{
    layout (location = 0) in vec3 inPosition;
    layout (location = 1) in vec3 inNormal;
    layout (location = 2) in vec2 inUV;
    
    struct OutStruct
	{
        vec3 Position;
		vec2 UV;
        vec3 Normal;
        vec3 CameraPosition;
	};

    layout (location = 0) out OutStruct Output;

    void main()
    {
        Output.Position = inPosition;
        Output.UV = inUV;
        Output.Normal = inNormal;
        Output.CameraPosition = u_ViewConstants.CameraPosition;
        gl_Position = u_ViewConstants.ProjectionMatrix * u_ViewConstants.ViewMatrix * vec4(inPosition, 1.0);
    }
}

fragment
{
	#include "includes/lightdata.h"

    const vec3 dielectric = vec3(0.04);
    const float PI = 3.14159265359;

	layout (location = 0) in InStruct
	{
		vec3 inPosition;
    	vec2 inUV;
    	vec3 inNormal;
    	vec3 inCameraPosition;
	};

    layout (location = 0) out vec4 outColor;

    layout(push_constant) uniform Constants
    {
        uint AlbedoIndex;
        uint NormalIndex;
        uint RoughnessIndex;
        uint MetallicIndex;

		uvec4 ClusterSize;
		
		float Scale;
		float Bias;
		uint EnableDebug;
		float Padding;
    } PushConstants;

//#define ROUGHNESS_PATTERN 1

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return alpha2/((PI * denom*denom) + 0.0001); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(vec3 albedo, float cosTheta, float metallic)
{
	vec3 F0 = mix(vec3(0.04), albedo, metallic); // * material.specular

	float r = 2 * (1 - 0.05);
	float t = min(max(2 - r, 0), 1);
	vec3 F = F0 + t * (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0 * r); 
	return F;    
}

// Specular BRDF composition --------------------------------------------

vec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 radiance, vec3 albedo, float metallic, float roughness)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNV = clamp(dot(N, V), 0.0, 1.0) + 0.0001;
	float dotNL = clamp(dot(N, L), 0.0, 1.0) + 0.0001;
	float dotNH = clamp(dot(N, H), 0.0, 1.0) + 0.0001;

	vec3 color = vec3(0.0);

	if (dotNL > 0.0)
	{
		float rroughness = max(0.05, roughness);
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, rroughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(albedo, dotNV, metallic);

		vec3 spec = D * F * G / (4.0 * dotNL * dotNV);

		color += spec * dotNL * radiance;
	}

	return color;
}

float LinearDepth(float depthSample)
{
    float linear = u_ViewConstants.Near * u_ViewConstants.Far / (u_ViewConstants.Far - depthSample * (u_ViewConstants.Far - u_ViewConstants.Near));
    return linear;
}

vec3 colors[8] = vec3[](
   vec3(0, 0, 0),    vec3( 0,  0,  1), vec3( 0, 1, 0),  vec3(0, 1,  1),
   vec3(1,  0,  0),  vec3( 1,  0,  1), vec3( 1, 1, 0),  vec3(1, 1, 1)
);

vec3 ColorHeatMap(float heat)
{
	if (heat < 0.0)
		return vec3(0.0);
	else if (heat > 1.0)
		return vec3(1.0);

	const vec4 kRedVec4   = vec4(0.13572138, 4.61539260, -42.66032258, 132.13108234);
    const vec4 kGreenVec4 = vec4(0.09140261, 2.19418839, 4.84296658, -14.18503333);
    const vec4 kBlueVec4  = vec4(0.10667330, 12.64194608, -60.58204836, 110.36276771);
    const vec2 kRedVec2   = vec2(-152.94239396, 59.28637943);
    const vec2 kGreenVec2 = vec2(4.27729857, 2.82956604);
    const vec2 kBlueVec2  = vec2(-89.90310912, 27.34824973);
	
	heat = clamp(heat, 0.0, 1.0);
	vec4 v4 = vec4(1.0, heat, heat * heat, heat * heat * heat);
	vec2 v2 = v4.zw * v4.z;

	return vec3(
		dot(v4, kRedVec4) + dot(v2, kRedVec2),
		dot(v4, kGreenVec4) + dot(v2, kGreenVec2),
		dot(v4, kBlueVec4) + dot(v2, kBlueVec2)
	);
}

// ----------------------------------------------------------------------------
void main()
{
	 //Locating which cluster you are a part of
    uint zTile     = uint(max(log2(LinearDepth(gl_FragCoord.z)) * PushConstants.Scale + PushConstants.Bias, 0.0));
    uvec3 tiles    = uvec3( uvec2( gl_FragCoord.xy / PushConstants.ClusterSize.w ), zTile);
    uint clusterIndex = tiles.x +
                     PushConstants.ClusterSize.x * tiles.y +
                     (PushConstants.ClusterSize.x * PushConstants.ClusterSize.y) * tiles.z;  
	
	uint pointLightCount = sbo_LightGrid.Cells[clusterIndex].PointLightCount;
	uint spotLightCount = sbo_LightGrid.Cells[clusterIndex].SpotLightCount;

	if (PushConstants.EnableDebug != 0)
	{	
		// light count per cluster
		//int totalLightCount = int(pointLightCount + spotLightCount);
		//if (totalLightCount == 0)
		//	--totalLightCount;
		//else if (totalLightCount == 2 * MAX_LIGHTS)
		//	totalLightCount++;

		//vec3 lightCountColor = ColorHeatMap(float(totalLightCount) / (2 * MAX_LIGHTS));
		//outColor = vec4(lightCountColor, 1.0);

		// cluster view
		uint zIndex = uint(mod(zTile, 8.0));
		outColor = vec4(colors[zIndex], 1.0);
		return;
	}

	//vec4 albedo = texture(BindlessTextures[nonuniformEXT(PushConstants.AlbedoIndex)], inUV.xy);
	
	vec3 triplanarBlendWeight = abs(inNormal);
	float blendSum = triplanarBlendWeight.x + triplanarBlendWeight.y + triplanarBlendWeight.z;
	triplanarBlendWeight /= vec3(blendSum);

	float scale = 0.01;

	vec4 albedo_x = texture(BindlessTextures[nonuniformEXT(PushConstants.AlbedoIndex)], inPosition.yz * scale);
	vec4 albedo_y = texture(BindlessTextures[nonuniformEXT(PushConstants.AlbedoIndex)], inPosition.xz * scale);
	vec4 albedo_z = texture(BindlessTextures[nonuniformEXT(PushConstants.AlbedoIndex)], inPosition.xy * scale);

	vec4 albedo = albedo_x * triplanarBlendWeight.x + albedo_y * triplanarBlendWeight.y + albedo_z * triplanarBlendWeight.z; 

	vec4 normal = texture(BindlessTextures[nonuniformEXT(PushConstants.NormalIndex)], inUV.xy);
	float metalness = 0.5; //texture(BindlessTextures[nonuniformEXT(PushConstants.MetallicIndex)], inUV.xy).x;
	float roughness = 0.5; //texture(BindlessTextures[nonuniformEXT(PushConstants.RoughnessIndex)], inUV.xy).x;

	vec3 N = normalize(inNormal);
	vec3 V = normalize(inCameraPosition - inPosition);

	// Add striped pattern to roughness based on vertex position
#ifdef ROUGHNESS_PATTERN
	roughness = max(roughness, step(fract(inPosition.y * 2.02), 0.5));
#endif

	// Specular contribution
	
	vec3 Lo = vec3(0, 0, 0);
	vec3 L = vec3(0, 0, 0);
	vec3 radiance = vec3(0, 0, 0);

	float attenuation = 1.0f;
	float shadowFactor = 1.0f;

	for (int i = 0; i < SceneLights.DirectionalLightCount; ++i)
	{
		DirectionalLight light = SceneLights.DirectionalLights[i];
		L = normalize(-light.Direction);

		radiance = light.Color * light.Intensity * attenuation;
		Lo += BRDF(L, V, N, radiance, albedo.xyz, metalness, roughness);
	}

	// Point lights
    
    uint lightIndexOffset = sbo_LightGrid.Cells[clusterIndex].PointLightOffset;
	for (uint i = 0; i < pointLightCount; ++i)
	{
		uint lightIndex = sbo_GlobalLightIndices.Indices[lightIndexOffset + i].PointLightIndex;
		PointLight light = SceneLights.PointLights[lightIndex];
		
		vec3 lightToFragPos = light.Position - inPosition;
		
		L = normalize(lightToFragPos);

		float dist = length(lightToFragPos);
		attenuation = 1.0 / (dist * dist);

		radiance = light.Color * light.Intensity * attenuation;
		Lo += BRDF(L, V, N, radiance, albedo.xyz, metalness, roughness);
	}

    lightIndexOffset = sbo_LightGrid.Cells[clusterIndex].SpotLightOffset;
	for (int i = 0; i < spotLightCount; ++i)
	{
		uint lightIndex = sbo_GlobalLightIndices.Indices[lightIndexOffset + i].SpotLightIndex;
		SpotLight light = SceneLights.SpotLights[lightIndex];
		
		vec3 lightToFragPos = light.Position - inPosition;
		float distance = length(lightToFragPos);
		
		L = normalize(lightToFragPos);
		
		float cutoff = cos(radians(light.Angle * 0.5));
		float scos = max(dot(L, light.Direction), cutoff);
		float rim = (1.0 - scos) / (1.0 - cutoff);

		attenuation = clamp(1.0 - (distance * distance) / (light.Range * light.Range), 0.0, 1.0);
		attenuation = mix(attenuation, 1.0, light.Falloff);
		attenuation *= 1.0 - pow(max(rim, 0.001), light.AngleAttenuation);

		radiance = light.Color * light.Intensity * attenuation;
		Lo += BRDF(L, V, N, radiance, albedo.xyz, metalness, roughness);
	}

	// Combine with ambient
	vec3 color = albedo.xyz * 0.02;
	color += Lo;

	// Gamma correct
	color = pow(color, vec3(0.4545));
	outColor = vec4(color, 1.0);
}