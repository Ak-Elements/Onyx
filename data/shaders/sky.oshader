#version 460 core

#include "includes/common.h"
#include "includes/viewconstants.h"
#include "includes/scattering/scattering.h"

vertex
{
    void main()
    {
        vec2 texCoord = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
        gl_Position = vec4(texCoord * 2.0f + -1.0f, 0.0f, 1.0f);
	    gl_Position.y = -gl_Position.y;
    }
}

fragment
{
    layout( push_constant ) uniform constants
    {
        vec3 CameraPosition;
        uint TransmittanceTextureIndex;

        vec3 SunDirection;
        uint SkyViewLutTextureIndex;

        vec3 CameraDirection;
    } PushConstants;

    layout(location = 0) out vec4 outColor;


    vec3 sunWithBloom(vec3 rayDir, vec3 sunDir)
    {
        const float sunSolidAngle = 0.53*PI/180.0;
        const float minSunCosTheta = cos(sunSolidAngle);

        float cosTheta = dot(rayDir, sunDir);
        if (cosTheta >= minSunCosTheta) return vec3(1.0);
        
        float offset = minSunCosTheta - cosTheta;
        float gaussianBloom = exp(-offset*50000.0)*0.5;
        float invBloom = 1.0/(0.02 + offset*300.0)*0.01;
        return vec3(gaussianBloom+invBloom);
    }

    void main()
    {
        const vec2 fragCoord = gl_FragCoord.xy;
        const vec3 clipspacePosition = vec3((fragCoord / u_ViewConstants.Viewport) * vec2(2.0, -2.0) - vec2(1.0, -1.0), 1.0);
        const vec4 viewspacePosition = u_ViewConstants.InverseProjectionMatrix * vec4(clipspacePosition, 1.0);
        const vec3 rayDirection = normalize(mat3(u_ViewConstants.InverseViewMatrix) * (viewspacePosition.xyz / viewspacePosition.w));
        const vec3 fragWorldPos = (u_ViewConstants.CameraPosition / 1000000.0f) + vec3(0.0, groundRadiusMM, 0.0);
        
        vec3 luminance = GetSkyLuminance(BindlessTextures[nonuniformEXT(PushConstants.SkyViewLutTextureIndex)], fragWorldPos, rayDirection, PushConstants.SunDirection);

        // Bloom should be added at the end, but this is subtle and works well.
        vec3 sunLum = sunWithBloom(rayDirection, PushConstants.SunDirection);
        // Use smoothstep to limit the effect, so it drops off to actual zero.
        sunLum = smoothstep(0.002, 1.0, sunLum);
        if (length(sunLum) > 0.0)
        {
            if (RayIntersectSphere(fragWorldPos, rayDirection, groundRadiusMM) >= 0.0)
            {
                sunLum *= 0.0;
            } 
            else
            {
                // If the sun value is applied to this pixel, we need to calculate the transmittance to obscure it.
                sunLum *= GetTransmittance(BindlessTextures[nonuniformEXT(PushConstants.TransmittanceTextureIndex)], fragWorldPos, PushConstants.SunDirection);
            }
        }
        luminance += sunLum;
        
        luminance *= 20.0;
        luminance = pow(luminance, vec3(1.3));
        luminance /= (smoothstep(0.0, 0.2, clamp(PushConstants.SunDirection, 0.0, 1.0) * 2.0 + 0.15));

        outColor = vec4(luminance, 1.0);
    }
}