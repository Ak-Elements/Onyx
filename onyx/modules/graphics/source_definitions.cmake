set(TARGET_PUBLIC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/public/onyx/graphics)
set(TARGET_PRIVATE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/private/onyx/graphics)

set(TARGET_PUBLIC_SOURCES
    ${TARGET_PUBLIC_PATH}/graphicssystem.h
    ${TARGET_PUBLIC_PATH}/buffer.h
    ${TARGET_PUBLIC_PATH}/bufferproperties.h
    ${TARGET_PUBLIC_PATH}/camera.h
    ${TARGET_PUBLIC_PATH}/commandbuffer.h
    ${TARGET_PUBLIC_PATH}/descriptorset.h
    ${TARGET_PUBLIC_PATH}/framebuffer.h
    ${TARGET_PUBLIC_PATH}/framebuffercache.h
    ${TARGET_PUBLIC_PATH}/graphicsapi.h
    ${TARGET_PUBLIC_PATH}/graphicsresourcepool.h
    ${TARGET_PUBLIC_PATH}/graphicstypes.h
    ${TARGET_PUBLIC_PATH}/memoryaccess.h
    ${TARGET_PUBLIC_PATH}/pipeline.h
    ${TARGET_PUBLIC_PATH}/pipelinelayout.h
    ${TARGET_PUBLIC_PATH}/renderpass.h
    ${TARGET_PUBLIC_PATH}/renderpasscache.h
    ${TARGET_PUBLIC_PATH}/sampler.h
    ${TARGET_PUBLIC_PATH}/texture.h
    ${TARGET_PUBLIC_PATH}/textureasset.h
    ${TARGET_PUBLIC_PATH}/textureproperties.h
    ${TARGET_PUBLIC_PATH}/texturestorage.h
    ${TARGET_PUBLIC_PATH}/texturestorageproperties.h
    ${TARGET_PUBLIC_PATH}/presentthread.h
    ${TARGET_PUBLIC_PATH}/vertex.h
    ${TARGET_PUBLIC_PATH}/window.h
    ${TARGET_PUBLIC_PATH}/lighting/lighting.h
    ${TARGET_PUBLIC_PATH}/rendergraph/rendergraph.h
    ${TARGET_PUBLIC_PATH}/rendergraph/rendergraphnodefactory.h
    ${TARGET_PUBLIC_PATH}/rendergraph/rendergraphtask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/atmosphericskytask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/multiplescatteringtask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/updatelightclusterstask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/updateviewconstantstask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/scatteringtask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/skyviewluttask.h
    ${TARGET_PUBLIC_PATH}/rendergraph/tasks/tonemappass.h
    ${TARGET_PUBLIC_PATH}/scattering/scattering.h
    ${TARGET_PUBLIC_PATH}/serialize/materialshadergraphserializer.h
    ${TARGET_PUBLIC_PATH}/serialize/rendergraphserializer.h
    ${TARGET_PUBLIC_PATH}/serialize/shadergraphserializer.h
    ${TARGET_PUBLIC_PATH}/serialize/textureserializer.h
    ${TARGET_PUBLIC_PATH}/shader/psocache.h
    ${TARGET_PUBLIC_PATH}/shader/shadercache.h	
    ${TARGET_PUBLIC_PATH}/shader/shadercompiler.h
    ${TARGET_PUBLIC_PATH}/shader/shadereffect.h
    ${TARGET_PUBLIC_PATH}/shader/shaderincluder.h
    ${TARGET_PUBLIC_PATH}/shader/shadermodule.h
    ${TARGET_PUBLIC_PATH}/shader/shaderpass.h
    ${TARGET_PUBLIC_PATH}/shader/shaderpreprocessor.h
    ${TARGET_PUBLIC_PATH}/shader/generators/shadergenerator.h
    ${TARGET_PUBLIC_PATH}/shadergraph/shadergraph.h
    ${TARGET_PUBLIC_PATH}/shadergraph/materialshadergraph.h
    ${TARGET_PUBLIC_PATH}/shadergraph/postprocessshadergraph.h
    ${TARGET_PUBLIC_PATH}/shadergraph/shadergraphnode.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/fragmentshaderoutnode.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/getworldnormal.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/getworldposition.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/sampletexturenode.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/math/arithmeticnodes.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/math/geometricnodes.h
    ${TARGET_PUBLIC_PATH}/shadergraph/nodes/math/vectornodes.h
    ${TARGET_PUBLIC_PATH}/vulkan/buffer.h
    ${TARGET_PUBLIC_PATH}/vulkan/commandbuffer.h
    ${TARGET_PUBLIC_PATH}/vulkan/commandbuffermanager.h
    ${TARGET_PUBLIC_PATH}/vulkan/commandpool.h
    ${TARGET_PUBLIC_PATH}/vulkan/debugutilsmessenger.h
    ${TARGET_PUBLIC_PATH}/vulkan/descriptorpool.h
    ${TARGET_PUBLIC_PATH}/vulkan/descriptorsetlayout.h
    ${TARGET_PUBLIC_PATH}/vulkan/descriptorset.h
    ${TARGET_PUBLIC_PATH}/vulkan/device.h
    ${TARGET_PUBLIC_PATH}/vulkan/devicememory.h
    ${TARGET_PUBLIC_PATH}/vulkan/fence.h
    ${TARGET_PUBLIC_PATH}/vulkan/framebuffer.h
    ${TARGET_PUBLIC_PATH}/vulkan/graphicsapi.h
    ${TARGET_PUBLIC_PATH}/vulkan/instance.h
    ${TARGET_PUBLIC_PATH}/vulkan/memoryallocator.h
    ${TARGET_PUBLIC_PATH}/vulkan/physicaldevice.h
    ${TARGET_PUBLIC_PATH}/vulkan/pipeline.h
    ${TARGET_PUBLIC_PATH}/vulkan/pipelinelayout.h
    ${TARGET_PUBLIC_PATH}/vulkan/renderpass.h
    ${TARGET_PUBLIC_PATH}/vulkan/sampler.h
    ${TARGET_PUBLIC_PATH}/vulkan/semaphore.h
    ${TARGET_PUBLIC_PATH}/vulkan/shader.h
    ${TARGET_PUBLIC_PATH}/vulkan/surface.h
    ${TARGET_PUBLIC_PATH}/vulkan/swapchain.h
    ${TARGET_PUBLIC_PATH}/vulkan/texture.h
    ${TARGET_PUBLIC_PATH}/vulkan/texturestorage.h
    ${TARGET_PUBLIC_PATH}/vulkan/vulkan.h
    ${TARGET_PUBLIC_PATH}/window/sdlwindow.h
    ${TARGET_PUBLIC_PATH}/window/windows/nativewindow.h
)

set(TARGET_PRIVATE_SOURCES
    ${TARGET_PRIVATE_PATH}/graphicssystem.cpp
    ${TARGET_PRIVATE_PATH}/buffer.cpp
    ${TARGET_PRIVATE_PATH}/camera.cpp
    ${TARGET_PRIVATE_PATH}/framebuffer.cpp
    ${TARGET_PRIVATE_PATH}/framebuffercache.cpp
    ${TARGET_PRIVATE_PATH}/graphicsapi.cpp
    ${TARGET_PRIVATE_PATH}/texture.cpp
    ${TARGET_PRIVATE_PATH}/textureasset.cpp
    ${TARGET_PRIVATE_PATH}/texturestorage.cpp
    ${TARGET_PRIVATE_PATH}/renderpasscache.cpp
    ${TARGET_PRIVATE_PATH}/presentthread.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/rendergraph.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/rendergraphnodefactory.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/rendergraphtask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/atmosphericskytask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/multiplescatteringtask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/updatelightclusterstask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/updateviewconstantstask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/scatteringtask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/skyviewluttask.cpp
    ${TARGET_PRIVATE_PATH}/rendergraph/tasks/tonemappass.cpp
    ${TARGET_PRIVATE_PATH}/serialize/materialshadergraphserializer.cpp
    ${TARGET_PRIVATE_PATH}/serialize/rendergraphserializer.cpp
    ${TARGET_PRIVATE_PATH}/serialize/shadergraphserializer.cpp
    ${TARGET_PRIVATE_PATH}/serialize/textureserializer.cpp
    ${TARGET_PRIVATE_PATH}/shader/psocache.cpp
    ${TARGET_PRIVATE_PATH}/shader/shadercache.cpp
    ${TARGET_PRIVATE_PATH}/shader/shadercompiler.cpp
    ${TARGET_PRIVATE_PATH}/shader/shadereffect.cpp
    ${TARGET_PRIVATE_PATH}/shader/shaderincluder.cpp
    ${TARGET_PRIVATE_PATH}/shader/shaderpreprocessor.cpp
    ${TARGET_PRIVATE_PATH}/shader/generators/shadergenerator.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/shadergraph.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/nodes/fragmentshaderoutnode.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/nodes/getworldnormal.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/nodes/getworldposition.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/nodes/sampletexturenode.cpp
    ${TARGET_PRIVATE_PATH}/shadergraph/nodes/shadergraphnodes.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/buffer.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/commandbuffer.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/commandbuffermanager.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/commandpool.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/debugutilsmessenger.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/descriptorpool.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/descriptorsetlayout.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/descriptorset.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/device.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/devicememory.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/fence.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/framebuffer.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/graphicsapi.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/instance.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/memoryallocator.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/physicaldevice.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/pipeline.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/pipelinelayout.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/renderpass.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/sampler.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/semaphore.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/shader.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/surface.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/swapchain.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/texture.cpp
    ${TARGET_PRIVATE_PATH}/vulkan/texturestorage.cpp
    ${TARGET_PRIVATE_PATH}/window/sdlwindow.cpp
    ${TARGET_PRIVATE_PATH}/window/windows/nativewindow.cpp	
)